// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  
  accounts      Account[] // Relation to Account for OAuth providers
  sessions      Session[] // Relation to Session for active user sessions
  streaks       Streak[] // Relation to Streak
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  provider           String  // OAuth provider name, e.g., "google", "facebook"
  providerAccountId  String  @map("provider_account_id") // Unique ID from the provider
  type               String  // Type of account, typically "oauth" for OAuth providers
  
  // OAuth tokens and credentials
  access_token       String? 
  refresh_token      String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId]) // Ensure unique accounts per provider
}

model Session {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  sessionToken String   @unique
  expires      DateTime
  
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier   String
  token        String   @unique
  expires      DateTime

  @@unique([identifier, token])
}

model Streak {
  id             String    @id @default(cuid())
  name           String    // Name of the streak, e.g., "Daily Run"
  description    String?   // Optional description of the streak
  streakType     StreakType // Enum defining the type of streak (Count, Duration, Click, Quantity)
  userId         String    // Foreign key linking to User
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime  @default(now()) // Creation date of the streak

  // Metrics for dashboard and tracking purposes
  totalCount     Int?      // Used for Count streaks
  totalDuration  Int?      // Used for Duration streaks, in minutes
  totalQuantity  Float?    // Used for Quantity streaks

  // Relations to support streak functionality
  entries        Entry[]   // Logs of individual streak entries
  reminders      Reminder[] // Reminders linked to this streak for user engagement
}

enum StreakType {
  COUNT       // Tracks count occurrences (e.g., cows born)
  DURATION    // Tracks time spent (e.g., hours worked)
  CLICK       // Simple daily check-off (e.g., completed task)
  QUANTITY    // Tracks quantities (e.g., liters of water)
}

model Entry {
  id          Int       @id @default(autoincrement())
  streakId    String
  streak      Streak    @relation(fields: [streakId], references: [id])
  timestamp   DateTime  @default(now()) // Auto-recorded entry time

  // Entry data based on streak type
  count       Int?      // Used for Count streaks
  duration    Int?      // Used for Duration streaks, in minutes
  quantity    Float?    // Used for Quantity streaks
  click       Boolean?  // Used for Click streaks (true if checked off)
}

model Reminder {
  id           Int       @id @default(autoincrement())
  streakId     String
  streak       Streak    @relation(fields: [streakId], references: [id])
  reminderTime DateTime  // Time to send the reminder
  frequency    String    // e.g., "daily", "weekly"
  lastSent     DateTime? // Date when the last reminder was sent
}
